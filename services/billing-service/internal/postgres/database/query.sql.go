// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "account" (id)
VALUES ($1)
RETURNING id, amount, created_at, updated_at
`

func (q *Queries) CreateAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPayment = `-- name: CreatePayment :one
INSERT INTO "payment" (id, account_id, amount)
VALUES ($1, $2, $3)
RETURNING id, account_id, amount, created_at
`

type CreatePaymentParams struct {
	ID        uuid.UUID
	AccountID uuid.UUID
	Amount    float64
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment, arg.ID, arg.AccountID, arg.Amount)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const findAccount = `-- name: FindAccount :one
SELECT id, amount, created_at, updated_at
FROM "account"
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, findAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "account"
SET amount = $2, updated_at = now()
WHERE id = $1
RETURNING id, amount, created_at, updated_at
`

type UpdateAccountParams struct {
	ID     uuid.UUID
	Amount float64
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.ID, arg.Amount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
