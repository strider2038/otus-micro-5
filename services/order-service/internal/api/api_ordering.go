/*
 * Order service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gofrs/uuid"
)

// A OrderingApiController binds http requests to an api service and writes the service results to the http response
type OrderingApiController struct {
	service OrderingApiServicer
}

// NewOrderingApiController creates a default api controller
func NewOrderingApiController(s OrderingApiServicer) Router {
	return &OrderingApiController{service: s}
}

// Routes returns all of the api route for the OrderingApiController
func (c *OrderingApiController) Routes() Routes {
	return Routes{
		{
			"CreateOrderForm",
			strings.ToUpper("Post"),
			"/api/v1/orders",
			c.CreateOrder,
		},
		{
			"GetOrders",
			strings.ToUpper("Get"),
			"/api/v1/orders",
			c.GetOrders,
		},
	}
}

// CreateOrderForm -
func (c *OrderingApiController) CreateOrder(w http.ResponseWriter, r *http.Request) {
	form := &CreateOrderForm{}
	if err := json.NewDecoder(r.Body).Decode(&form); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	form.UserID = uuid.FromStringOrNil(r.Header.Get("X-User-Id"))
	form.IdempotenceKey = r.Header.Get("If-Match")

	result, err := c.service.CreateOrder(r.Context(), *form)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetOrders -
func (c *OrderingApiController) GetOrders(w http.ResponseWriter, r *http.Request) {
	userID := uuid.FromStringOrNil(r.Header.Get("X-User-Id"))

	result, eTag, err := c.service.GetOrders(r.Context(), userID)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	w.Header().Set("ETag", eTag)
	EncodeJSONResponse(result.Body, &result.Code, w)

}
