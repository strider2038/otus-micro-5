/*
 * Order service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"net/http"

	"order-service/internal/messaging"
	"order-service/internal/ordering"

	"github.com/gofrs/uuid"
	"github.com/pkg/errors"
)

// OrderingApiService is a service that implents the logic for the OrderingApiServicer
// This service should implement the business logic for every endpoint for the OrderingApi API.
// Include any external packages or services that will be required by this service.
type OrderingApiService struct {
	orders     ordering.OrderRepository
	dispatcher messaging.Dispatcher
}

// NewOrderingApiService creates a default api service
func NewOrderingApiService(orders ordering.OrderRepository, dispatcher messaging.Dispatcher) OrderingApiServicer {
	return &OrderingApiService{orders: orders, dispatcher: dispatcher}
}

// GetOrders -
func (s *OrderingApiService) GetOrders(ctx context.Context, userID uuid.UUID) (ImplResponse, error) {
	orders, err := s.orders.FindByUser(ctx, userID)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), errors.WithMessagef(
			err,
			"failed to find orders for user %s",
			userID,
		)
	}

	return Response(http.StatusOK, orders), nil
}

// CreateOrderForm -
func (s *OrderingApiService) CreateOrder(ctx context.Context, form CreateOrderForm) (ImplResponse, error) {
	order := ordering.NewOrder(form.UserID, form.Price)
	err := s.orders.Save(ctx, order)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), errors.WithMessagef(
			err,
			"failed to create order for user %s",
			form.UserID,
		)
	}

	err = s.dispatcher.Dispatch(ctx, messaging.CreatePayment{
		ID:     order.PaymentID,
		UserID: order.UserID,
		Amount: order.Price,
	})
	if err != nil {
		return Response(http.StatusInternalServerError, nil), errors.WithMessagef(
			err,
			"failed to dispatch payment for user %s",
			form.UserID,
		)
	}

	return Response(http.StatusAccepted, order), nil
}
