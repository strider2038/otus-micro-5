// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (id, price, user_id, payment_id)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, payment_id, price, status, created_at, updated_at
`

type CreateOrderParams struct {
	ID        uuid.UUID
	Price     float64
	UserID    uuid.UUID
	PaymentID uuid.UUID
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.Price,
		arg.UserID,
		arg.PaymentID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrder = `-- name: FindOrder :one
SELECT id, user_id, payment_id, price, status, created_at, updated_at
FROM "order"
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, findOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrderByPayment = `-- name: FindOrderByPayment :one
SELECT id, user_id, payment_id, price, status, created_at, updated_at
FROM "order"
WHERE payment_id = $1
LIMIT 1
`

func (q *Queries) FindOrderByPayment(ctx context.Context, paymentID uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, findOrderByPayment, paymentID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserOrders = `-- name: FindUserOrders :many
SELECT id, user_id, payment_id, price, status, created_at, updated_at
FROM "order"
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) FindUserOrders(ctx context.Context, userID uuid.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, findUserOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PaymentID,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE "order"
SET status = $2, updated_at = now()
WHERE id = $1
RETURNING id, user_id, payment_id, price, status, created_at, updated_at
`

type UpdateOrderParams struct {
	ID     uuid.UUID
	Status string
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
